generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StressQuestion {
  id     Int    @id @default(autoincrement())
  event  String @unique
  points Int
}

model StressResult {
  id         Int      @id @default(autoincrement())
  userId     Int?
  totalScore Int
  createdAt  DateTime @default(now())
  user       User?    @relation("UserStressResults", fields: [userId], references: [id])
}

model User {
  id                Int              @id @default(autoincrement())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              Role             @default(USER)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  isActive          Boolean          @default(true)
  resetToken        String?
  resetTokenExpires DateTime?
  favorites         Favorite[]
  results           Result[]
  stressResults     StressResult[]   @relation("UserStressResults")
  tickets           Ticket[]
  ticketResponses   TicketResponse[]
  userEmotions      UserEmotion[]
}

model UserEmotion {
  id          Int         @id @default(autoincrement())
  userId      Int
  emotionId   Int
  date        DateTime    @default(now())
  comment     String?
  emotionType EmotionType @relation("EmotionToType", fields: [emotionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("Emotion")
}

model Result {
  id         Int      @id @default(autoincrement())
  userId     Int
  totalScore Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model EmotionType {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  level        Int
  parentId     Int?
  color        String?
  bgColor      String?
  parent       EmotionType?  @relation("EmotionHierarchy", fields: [parentId], references: [id])
  children     EmotionType[] @relation("EmotionHierarchy")
  userEmotions UserEmotion[] @relation("EmotionToType")
}

model Ticket {
  id          Int              @id @default(autoincrement())
  subject     String
  description String
  type        TicketType
  priority    TicketPriority   @default(MOYENNE)
  status      TicketStatus     @default(OUVERT)
  userId      Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  responses   TicketResponse[]
}

model TicketResponse {
  id        Int      @id @default(autoincrement())
  message   String
  isAdmin   Boolean  @default(false)
  ticketId  Int
  userId    Int
  createdAt DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Activity {
  id          Int              @id @default(autoincrement())
  title       String           @unique
  description String
  category    ActivityCategory
  duration    String
  level       String
  location    String
  equipment   String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  favorites   Favorite[]
}

model Favorite {
  id         Int      @id @default(autoincrement())
  userId     Int
  activityId Int
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, activityId])
}

model PageContent {
  id        Int      @id @default(autoincrement())
  page      String   @unique
  title     String
  content   String
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum TicketStatus {
  OUVERT
  EN_COURS
  RESOLU
  FERME
}

enum TicketPriority {
  BASSE
  MOYENNE
  HAUTE
}

enum TicketType {
  BUG
  AIDE
  SUGGESTION
  AUTRE
}

enum ActivityCategory {
  BIEN_ETRE
  SPORT
  ART
  AVENTURE
}
