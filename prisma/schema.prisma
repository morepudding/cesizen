generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model StressQuestion {
  id     Int    @id @default(autoincrement())
  event  String @unique
  points Int
}

model StressResult {
  id         Int      @id @default(autoincrement())
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id], name: "UserStressResults")
  totalScore Int
  createdAt  DateTime @default(now())
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  favorites     Favorite[]
  userEmotions  UserEmotion[]
  results       Result[]
  stressResults StressResult[] @relation("UserStressResults")
  isActive      Boolean       @default(true)
  resetToken     String?
  resetTokenExpires DateTime?
}

model UserEmotion {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  emotionId   Int      
  emotionType EmotionType @relation(fields: [emotionId], references: [id], name: "EmotionToType")
  date        DateTime @default(now())
  comment     String?
}

model Result {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  totalScore Int
  createdAt  DateTime @default(now())
}

model EmotionType {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  level    Int      // 1 = Emotion principale, 2 = Sous-émotion
  parentId Int?     
  parent   EmotionType? @relation("EmotionHierarchy", fields: [parentId], references: [id])
  children EmotionType[] @relation("EmotionHierarchy")
  userEmotions UserEmotion[] @relation("EmotionToType")
  color    String?  // Couleur de l'émotion (uniquement pour niveau 1)
  bgColor  String?  // Couleur de fond de l'émotion (uniquement pour niveau 1)
}

enum ActivityCategory {
  BIEN_ETRE
  SPORT
  ART
  AVENTURE
}

model Activity {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  description String
  category    ActivityCategory
  duration    String
  level       String
  location    String
  equipment   String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  favorites   Favorite[]
}

model Favorite {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([userId, activityId])
}

model PageContent {
  id       Int    @id @default(autoincrement())
  page     String @unique
  title    String
  content  String
  updatedAt DateTime @updatedAt
}
